// src/services/cashRegisterService.js
class CashRegisterService {
  constructor() {
    this.connected = false;
    this.lastSync = null;
    this.autoSyncInterval = null;
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
  async connect() {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ...');
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      this.connected = true;
      this.lastSync = new Date();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      this.startAutoSync();
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:', error);
      this.connected = false;
      return false;
    }
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã
  async getCashRegisterData(date = new Date().toISOString().split('T')[0]) {
    if (!this.connected) {
      throw new Error('–ö–∞—Å—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã –∑–∞ ${date}...`);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã
    const cashData = {
      date,
      totalRevenue: Math.floor(Math.random() * 200000) + 50000,
      totalTransactions: Math.floor(Math.random() * 100) + 20,
      averageReceipt: Math.floor(Math.random() * 5000) + 1000,
      paymentMethods: {
        cash: Math.floor(Math.random() * 100000) + 20000,
        card: Math.floor(Math.random() * 120000) + 30000,
        sbp: Math.floor(Math.random() * 40000) + 10000
      },
      topProducts: [
        { name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω', quantity: 5, amount: 150000 },
        { name: '–ù–∞—É—à–Ω–∏–∫–∏', quantity: 12, amount: 60000 },
        { name: '–ß–µ—Ö–æ–ª', quantity: 25, amount: 25000 },
        { name: '–ó–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', quantity: 8, amount: 16000 },
        { name: '–ö–∞–±–µ–ª—å', quantity: 30, amount: 15000 }
      ],
      hourlyData: this.generateHourlyData(),
      lastUpdated: new Date().toISOString()
    };

    this.lastSync = new Date();
    return cashData;
  }

  generateHourlyData() {
    const hours = [];
    for (let hour = 9; hour <= 21; hour++) {
      hours.push({
        hour: `${hour}:00`,
        revenue: Math.floor(Math.random() * 20000) + 5000,
        transactions: Math.floor(Math.random() * 10) + 2
      });
    }
    return hours;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  startAutoSync() {
    this.autoSyncInterval = setInterval(async () => {
      if (this.connected) {
        try {
          console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Å—Å—ã...');
          await this.getCashRegisterData();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
      }
    }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  stopAutoSync() {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
      this.autoSyncInterval = null;
    }
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—Å—Å—É (–≤–æ–∑–≤—Ä–∞—Ç—ã, –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏)
  async sendCorrection(correctionData) {
    if (!this.connected) {
      throw new Error('–ö–∞—Å—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤ –∫–∞—Å—Å–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:', correctionData);
    
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return {
      success: true,
      correctionId: `CORR-${Date.now()}`,
      timestamp: new Date().toISOString()
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getStatus() {
    return {
      connected: this.connected,
      lastSync: this.lastSync,
      autoSync: !!this.autoSyncInterval
    };
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –∫–∞—Å—Å—ã
  disconnect() {
    this.connected = false;
    this.stopAutoSync();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
  }
}

export const cashRegisterService = new CashRegisterService();