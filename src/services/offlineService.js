class OfflineService {
  constructor() {
    this.isOnline = navigator.onLine;
    this.pendingActions = [];
    this.init();
  }

  init() {
    window.addEventListener('online', this.handleOnline.bind(this));
    window.addEventListener('offline', this.handleOffline.bind(this));
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pendingActions –∏–∑ localStorage
    this.loadPendingActions();
  }

  handleOnline() {
    this.isOnline = true;
    console.log('üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (typeof notificationService !== 'undefined') {
      notificationService.showOnlineSync();
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    this.processPendingActions();
  }

  handleOffline() {
    this.isOnline = false;
    console.log('üî¥ –†–∞–±–æ—Ç–∞ –æ—Ñ–ª–∞–π–Ω');
    
    if (typeof notificationService !== 'undefined') {
      notificationService.showOfflineWarning();
    }
  }

  loadPendingActions() {
    try {
      const saved = localStorage.getItem('eps-pending-actions');
      if (saved) {
        this.pendingActions = JSON.parse(saved) || [];
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:', error);
      this.pendingActions = [];
    }
  }

  savePendingActions() {
    try {
      localStorage.setItem('eps-pending-actions', JSON.stringify(this.pendingActions));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:', error);
    }
  }

  addPendingAction(action) {
    this.pendingActions.push({
      ...action,
      timestamp: new Date().toISOString(),
      id: Date.now().toString()
    });
    this.savePendingActions();
  }

  async processPendingActions() {
    if (this.pendingActions.length === 0) return;

    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${this.pendingActions.length} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π...`);
    
    const successfulActions = [];
    
    for (const action of this.pendingActions) {
      try {
        // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:', action);
        
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ–µ
        successfulActions.push(action.id);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:', error);
      }
    }

    // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    this.pendingActions = this.pendingActions.filter(
      action => !successfulActions.includes(action.id)
    );
    this.savePendingActions();
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å: ${this.pendingActions.length} –¥–µ–π—Å—Ç–≤–∏–π`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–µ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
  async executeWithOfflineSupport(actionName, actionFunction, data) {
    if (this.isOnline) {
      try {
        return await actionFunction(data);
      } catch (error) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ
        if (error.message.includes('Network') || !this.isOnline) {
          this.addPendingAction({
            name: actionName,
            data: data,
            function: actionFunction.toString()
          });
          throw new Error('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é');
        }
        throw error;
      }
    } else {
      // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      this.addPendingAction({
        name: actionName,
        data: data,
        function: actionFunction.toString()
      });
      throw new Error('–†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω. –î–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏');
    }
  }

  getStatus() {
    return {
      isOnline: this.isOnline,
      pendingActionsCount: this.pendingActions.length,
      lastSync: localStorage.getItem('eps-last-sync') || 'never'
    };
  }
}

export const offlineService = new OfflineService();