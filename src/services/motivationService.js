// src/services/motivationService.js
class MotivationService {
  constructor() {
    this.storageKey = 'eps-motivation-data';
    this.init();
  }

  init() {
    if (!this.getData()) {
      const initialData = {
        employees: {},
        achievements: [],
        settings: {
          pointsPerPlan: 10,
          bonusForOverachievement: 5,
          monthlyBonus: 100
        },
        version: '1.0.0'
      };
      this.saveData(initialData);
    }
  }

  getData() {
    try {
      const data = localStorage.getItem(this.storageKey);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  saveData(data) {
    try {
      localStorage.setItem(this.storageKey, JSON.stringify(data));
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  recordAchievement(employeeId, type, fact, plan, date) {
    const data = this.getData();
    if (!data) return null;

    const percentage = Math.round((fact / plan) * 100);
    let points = data.settings.pointsPerPlan;

    // –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (percentage > 100) {
      points += data.settings.bonusForOverachievement;
    }

    // –ó–∞–ø–∏—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievement = {
      id: Date.now().toString(),
      employeeId,
      type,
      fact,
      plan,
      percentage,
      points,
      date: date || new Date().toISOString().split('T')[0],
      timestamp: new Date().toISOString()
    };

    data.achievements.unshift(achievement);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if (!data.employees[employeeId]) {
      data.employees[employeeId] = {
        totalPoints: 0,
        totalAchievements: 0,
        monthlyPoints: 0
      };
    }

    data.employees[employeeId].totalPoints += points;
    data.employees[employeeId].totalAchievements += 1;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    const achievementMonth = new Date(achievement.date).getMonth();
    const currentMonth = new Date().getMonth();
    if (achievementMonth === currentMonth) {
      data.employees[employeeId].monthlyPoints += points;
    }

    this.saveData(data);
    return achievement;
  }

  getEmployeeStats(employeeId) {
    const data = this.getData();
    if (!data) return null;

    const employee = data.employees[employeeId];
    if (!employee) return null;

    const achievements = data.achievements.filter(a => a.employeeId === employeeId);
    const thisMonth = new Date().getMonth();
    const monthlyAchievements = achievements.filter(a => 
      new Date(a.date).getMonth() === thisMonth
    );

    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const leaderboard = this.getLeaderboard();
    const monthlyRank = leaderboard.findIndex(emp => emp.employeeId === employeeId) + 1;

    return {
      totalPoints: employee.totalPoints,
      totalAchievements: achievements.length,
      monthlyPoints: monthlyAchievements.reduce((sum, a) => sum + a.points, 0),
      monthlyAchievements: monthlyAchievements.length,
      monthlyRank: monthlyRank > 0 ? monthlyRank : null,
      achievements: achievements.slice(0, 10)
    };
  }

  getLeaderboard(limit = 10) {
    const data = this.getData();
    if (!data) return [];

    const employees = Object.entries(data.employees)
      .map(([employeeId, stats]) => ({
        employeeId,
        ...stats
      }))
      .sort((a, b) => b.monthlyPoints - a.monthlyPoints)
      .slice(0, limit);

    return employees;
  }

  getRecentAchievements(limit = 5) {
    const data = this.getData();
    if (!data) return [];

    return data.achievements
      .slice(0, limit)
      .map(achievement => ({
        ...achievement,
        title: this.getAchievementTitle(achievement.type, achievement.percentage)
      }));
  }

  getAchievementTitle(type, percentage) {
    const titles = {
      revenue: {
        100: '–ü–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
        110: '–í—ã—Ä—É—á–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞ 10%!',
        120: '–í—ã—Ä—É—á–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞ 20%!',
        150: '–í—ã—Ä—É—á–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –Ω–∞ 50%! üéâ'
      },
      focus: {
        100: '–ü–ª–∞–Ω –ø–æ —Ñ–æ–∫—É—Å–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω!',
        110: '–§–æ–∫—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–≤—ã—à–µ–Ω—ã –Ω–∞ 10%!',
        120: '–§–æ–∫—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–≤—ã—à–µ–Ω—ã –Ω–∞ 20%!',
        150: '–§–æ–∫—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–≤—ã—à–µ–Ω—ã –Ω–∞ 50%! üéâ'
      },
      sbp: {
        100: '–ü–ª–∞–Ω –ø–æ –°–ë–ü –≤—ã–ø–æ–ª–Ω–µ–Ω!',
        110: '–°–ë–ü –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ 10%!',
        120: '–°–ë–ü –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ 20%!',
        150: '–°–ë–ü –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ 50%! üéâ'
      }
    };

    const typeTitles = titles[type] || {};
    const exactMatch = typeTitles[percentage];
    if (exactMatch) return exactMatch;

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const milestones = Object.keys(typeTitles).map(Number).sort((a, b) => b - a);
    const milestone = milestones.find(m => percentage >= m);
    
    return milestone ? typeTitles[milestone] : '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
  }
}

export const motivationService = new MotivationService();