// src/services/dataService.js
class DataService {
  constructor() {
    this.storageKey = 'eps-analytics-data';
    this.listeners = []; // –ú–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π-–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.init();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   * @param {function} listener - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   * @returns {function} —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
   */
  subscribe(listener) {
    this.listeners.push(listener);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  notifyListeners() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ listeners –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    const currentListeners = [...this.listeners];
    currentListeners.forEach(listener => {
      try {
        listener();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ listener:', error);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
   */
  getData() {
    try {
      const data = localStorage.getItem(this.storageKey);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
   */
  saveData(data) {
    try {
      data.lastUpdated = new Date().toISOString();
      localStorage.setItem(this.storageKey, JSON.stringify(data));
      
      // –£–í–ï–î–û–ú–õ–Ø–ï–ú –ü–û–î–ü–ò–°–ß–ò–ö–û–í –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø
      this.notifyListeners();
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  init() {
    if (!this.getData()) {
      const initialData = {
        employees: [
          {
            id: '1',
            name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            employeeId: '12345',
            phone: '+7 (999) 123-45-67',
            email: 'ivanov@epc.ru',
            telegram: '@ivanov',
            birthDate: '15.03.1990',
            stores: ['–ï–†–° 2334'],
            role: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            position: '–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
            department: '–ü—Ä–æ–¥–∞–∂–∏',
            hireDate: '15.01.2024',
            createdAt: new Date().toISOString()
          },
          {
            id: '2',
            name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
            employeeId: '12346',
            phone: '+7 (999) 123-45-68',
            email: 'petrova@epc.ru',
            telegram: '@petrova',
            birthDate: '20.07.1985',
            stores: ['–ï–†–° 2334'],
            role: '–ó–î–ú',
            position: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞',
            department: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            hireDate: '20.01.2024',
            createdAt: new Date().toISOString()
          },
          {
            id: '3',
            name: '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
            employeeId: '12347',
            phone: '+7 (999) 123-45-69',
            email: 'sidorov@epc.ru',
            telegram: '@sidorov',
            birthDate: '10.11.1992',
            stores: ['–ï–†–° 2312'],
            role: '–ê–¥–º–∏–Ω',
            position: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
            department: 'IT',
            hireDate: '10.01.2024',
            createdAt: new Date().toISOString()
          },
          {
            id: '4',
            name: '–ö–æ–∑–ª–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞',
            employeeId: '12348',
            phone: '+7 (999) 123-45-70',
            email: 'kozlova@epc.ru',
            telegram: '@kozlova',
            birthDate: '05.05.1988',
            stores: ['–ï–†–° 2312'],
            role: '–î–¢–ö',
            position: '–î–∏—Ä–µ–∫—Ç–æ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞',
            department: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            hireDate: '05.01.2024',
            createdAt: new Date().toISOString()
          }
        ],
        revenueData: {
          '2024-09-27': [
            {
              employeeId: '12345',
              employeeName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
              focus: '5000',
              sbp: '3000',
              cash: '2000',
              timestamp: new Date().toISOString()
            },
            {
              employeeId: '12346',
              employeeName: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
              focus: '3000',
              sbp: '4000',
              cash: '1000',
              timestamp: new Date().toISOString()
            }
          ]
        },
        plans: {
          '2024-09-27': {
            revenue: 150000,
            focus: 50000,
            sbp: 30000,
            updatedAt: new Date().toISOString()
          }
        },
        schedules: {
          '2024-09-27': [
            {
              employeeId: '12345',
              startTime: '09:00',
              endTime: '18:00',
              type: 'work',
              createdAt: new Date().toISOString()
            }
          ]
        },
        version: '1.0.0',
        lastUpdated: new Date().toISOString()
      };
      this.saveData(initialData);
    } else {
      this.repairData();
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  repairData() {
    const allData = this.getData();
    if (!allData) return;

    let needsRepair = false;

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ revenueData
    if (!allData.revenueData || typeof allData.revenueData !== 'object') {
      allData.revenueData = {};
      needsRepair = true;
    }

    Object.keys(allData.revenueData).forEach(date => {
      if (!Array.isArray(allData.revenueData[date])) {
        allData.revenueData[date] = [];
        needsRepair = true;
      }
    });

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ employees
    if (!Array.isArray(allData.employees)) {
      allData.employees = [];
      needsRepair = true;
    } else {
      allData.employees = allData.employees.map(emp => ({
        id: String(emp.id || Date.now().toString()),
        name: String(emp.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'),
        employeeId: String(emp.employeeId || '00000'),
        phone: String(emp.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'),
        email: String(emp.email || '–ù–µ —É–∫–∞–∑–∞–Ω'),
        telegram: String(emp.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'),
        birthDate: String(emp.birthDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
        stores: Array.isArray(emp.stores) ? emp.stores : ['–ï–†–° 2334'],
        role: String(emp.role || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
        position: String(emp.position || '–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'),
        department: String(emp.department || '–ü—Ä–æ–¥–∞–∂–∏'),
        hireDate: String(emp.hireDate || '15.01.2024'),
        createdAt: emp.createdAt || new Date().toISOString()
      }));
    }

    if (needsRepair) {
      console.warn('üîß –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      this.saveData(allData);
    }

    return allData;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
   */
  getCurrentDate() {
    return new Date().toISOString().split('T')[0];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
   */
  sanitizeNumber(value) {
    if (typeof value === 'number') return String(value);
    if (typeof value === 'string') {
      const num = value.replace(/[^\d]/g, '');
      return num || '0';
    }
    return '0';
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ==========

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
   */
  getEmployees() {
    const allData = this.getData();
    return allData ? allData.employees : [];
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
   */
  getEmployeeById(employeeId) {
    const allData = this.getData();
    if (!allData) return null;
    return allData.employees.find(emp => emp.employeeId === employeeId);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   */
  updateEmployee(employeeId, updatedData) {
    const allData = this.getData();
    if (!allData) {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return false;
    }

    const employeeIndex = allData.employees.findIndex(emp => emp.employeeId === employeeId);
    if (employeeIndex === -1) {
      console.error('‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', employeeId);
      return false;
    }

    // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ú–ê–°–°–ò–í –°–û–¢–†–£–î–ù–ò–ö–û–í (–≤–∞–∂–Ω–æ –¥–ª—è React)
    const updatedEmployees = [...allData.employees];
    
    // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –û–ë–™–ï–ö–¢ –°–û–¢–†–£–î–ù–ò–ö–ê
    updatedEmployees[employeeIndex] = {
      ...updatedEmployees[employeeIndex],
      ...updatedData
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const success = this.saveData({
      ...allData,
      employees: updatedEmployees
    });

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', {
      employeeId,
      updatedData,
      result: updatedEmployees[employeeIndex]
    });

    return success;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   */
  addEmployee(employeeData) {
    const allData = this.getData();
    if (!allData) return false;

    const newEmployee = {
      id: Date.now().toString(),
      name: String(employeeData.name || '–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'),
      employeeId: String(employeeData.employeeId || Date.now().toString()),
      phone: String(employeeData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'),
      email: String(employeeData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'),
      telegram: String(employeeData.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'),
      birthDate: String(employeeData.birthDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
      stores: Array.isArray(employeeData.stores) ? employeeData.stores : ['–ï–†–° 2334'],
      role: String(employeeData.role || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
      position: String(employeeData.position || '–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'),
      department: String(employeeData.department || '–ü—Ä–æ–¥–∞–∂–∏'),
      hireDate: String(employeeData.hireDate || '15.01.2024'),
      createdAt: new Date().toISOString()
    };

    // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ú–ê–°–°–ò–í
    const newData = {
      ...allData,
      employees: [...allData.employees, newEmployee]
    };

    return this.saveData(newData);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   */
  deleteEmployee(employeeId) {
    const allData = this.getData();
    if (!allData) return false;

    // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ú–ê–°–°–ò–í –ë–ï–ó –£–î–ê–õ–ï–ù–ù–û–ì–û –°–û–¢–†–£–î–ù–ò–ö–ê
    const newData = {
      ...allData,
      employees: allData.employees.filter(emp => emp.id !== employeeId)
    };

    return this.saveData(newData);
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–´–†–£–ß–ö–û–ô ==========

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã—Ä—É—á–∫–µ
   */
  saveRevenueEntry(date, employeeId, employeeName, data) {
    try {
      const allData = this.getData();
      if (!allData) {
        console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return false;
      }

      const entryDate = date || this.getCurrentDate();
      const safeEmployeeId = String(employeeId || 'unknown');
      const safeEmployeeName = String(employeeName || `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${safeEmployeeId}`);
      
      const safeData = {
        focus: this.sanitizeNumber(data?.focus),
        sbp: this.sanitizeNumber(data?.sbp),
        cash: this.sanitizeNumber(data?.cash)
      };

      console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ä—É—á–∫–∏:', { 
        date: entryDate, 
        employeeId: safeEmployeeId, 
        employeeName: safeEmployeeName,
        data: safeData 
      });

      // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
      const newRevenueData = { ...allData.revenueData };
      if (!newRevenueData[entryDate]) {
        newRevenueData[entryDate] = [];
      }
      
      const newDateEntries = [...newRevenueData[entryDate]];
      const existingIndex = newDateEntries.findIndex(
        entry => entry.employeeId === safeEmployeeId
      );
      
      const entryData = {
        employeeId: safeEmployeeId,
        employeeName: safeEmployeeName,
        focus: safeData.focus,
        sbp: safeData.sbp,
        cash: safeData.cash,
        timestamp: new Date().toISOString()
      };
      
      if (existingIndex >= 0) {
        newDateEntries[existingIndex] = entryData;
      } else {
        newDateEntries.push(entryData);
      }
      
      newRevenueData[entryDate] = newDateEntries;
      
      const newData = {
        ...allData,
        revenueData: newRevenueData
      };
      
      const success = this.saveData(newData);
      if (success) {
        console.log('‚úì –î–∞–Ω–Ω—ã–µ –≤—ã—Ä—É—á–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ä—É—á–∫–∏');
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ saveRevenueEntry:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –≤—ã—Ä—É—á–∫–∏
   */
  getDailyRevenue(date) {
    const allData = this.getData();
    if (!allData) return { focus: 0, sbp: 0, cash: 0 };

    const entryDate = date || this.getCurrentDate();
    const dailyData = allData.revenueData[entryDate] || [];
    
    return dailyData.reduce((total, entry) => ({
      focus: total.focus + (parseInt(entry.focus) || 0),
      sbp: total.sbp + (parseInt(entry.sbp) || 0),
      cash: total.cash + (parseInt(entry.cash) || 0)
    }), { focus: 0, sbp: 0, cash: 0 });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –≤—ã—Ä—É—á–∫–µ –∑–∞ –¥–µ–Ω—å
   */
  getRevenueEntries(date) {
    const allData = this.getData();
    if (!allData) return [];

    const entryDate = date || this.getCurrentDate();
    return allData.revenueData[entryDate] || [];
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–ê–ú–ò ==========

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
   */
  saveDailyPlan(date, planData) {
    const allData = this.getData();
    if (!allData) return false;

    const planDate = date || this.getCurrentDate();
    
    const newData = {
      ...allData,
      plans: {
        ...allData.plans,
        [planDate]: {
          revenue: parseInt(planData.revenue) || 0,
          focus: parseInt(planData.focus) || 0,
          sbp: parseInt(planData.sbp) || 0,
          updatedAt: new Date().toISOString()
        }
      }
    };
    
    return this.saveData(newData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
   */
  getDailyPlan(date) {
    const allData = this.getData();
    if (!allData) return null;

    const planDate = date || this.getCurrentDate();
    return allData.plans[planDate] || null;
  }

  getPlansForMonth(year, month) {
    const allData = this.getData();
    if (!allData || !allData.plans) return {};

    const plansInMonth = {};
    Object.keys(allData.plans).forEach(dateStr => {
      const date = new Date(dateStr);
      if (date.getFullYear() === year && (date.getMonth() + 1) === month) {
        plansInMonth[dateStr] = allData.plans[dateStr];
      }
    });

    return plansInMonth;
  }
  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ==========

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
   */
  saveScheduleEntry(date, employeeId, scheduleData) {
    const allData = this.getData();
    if (!allData) return false;

    const scheduleDate = date || this.getCurrentDate();
    
    // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
    const newSchedules = { ...(allData.schedules || {}) };
    if (!newSchedules[scheduleDate]) {
      newSchedules[scheduleDate] = [];
    }

    const newDateSchedules = [...newSchedules[scheduleDate]];
    const existingIndex = newDateSchedules.findIndex(
      entry => entry.employeeId === employeeId
    );

    const entryData = {
      employeeId: String(employeeId),
      startTime: String(scheduleData.startTime || '09:00'),
      endTime: String(scheduleData.endTime || '18:00'),
      type: String(scheduleData.type || 'work'),
      createdAt: new Date().toISOString()
    };

    if (existingIndex >= 0) {
      newDateSchedules[existingIndex] = entryData;
    } else {
      newDateSchedules.push(entryData);
    }

    newSchedules[scheduleDate] = newDateSchedules;

    const newData = {
      ...allData,
      schedules: newSchedules
    };

    return this.saveData(newData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É
   */
  getScheduleForDate(date) {
    const allData = this.getData();
    if (!allData || !allData.schedules) return [];
    return allData.schedules[date] || [];
  }

  // ========== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  exportData() {
    return this.getData();
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  importData(newData) {
    try {
      const success = this.saveData(newData);
      if (success) {
        console.log('‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      }
      return success;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  clearAllData() {
    try {
      localStorage.removeItem(this.storageKey);
      this.init();
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  getStorageInfo() {
    const data = this.getData();
    return {
      employeesCount: data?.employees?.length || 0,
      revenueDays: Object.keys(data?.revenueData || {}).length,
      plansCount: Object.keys(data?.plans || {}).length,
      schedulesCount: Object.keys(data?.schedules || {}).length,
      version: data?.version || 'unknown',
      lastUpdated: data?.lastUpdated || 'unknown'
    };
  }
  getEmployeeSchedule(employeeId, month, year) {
    const allData = this.getData();
    if (!allData || !allData.schedules) return {};

    const employeeSchedules = {};
    Object.keys(allData.schedules).forEach(dateStr => {
      const date = new Date(dateStr);
      if (date.getFullYear() === year && (date.getMonth() + 1) === month) {
        const schedule = allData.schedules[dateStr].find(s => s.employeeId === employeeId);
        if (schedule) {
          employeeSchedules[dateStr] = schedule;
        }
      }
    });

    return employeeSchedules;
}
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const dataService = new DataService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º dashboardService –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
export const dashboardService = {
  getDashboardData: (date = new Date().toISOString().split('T')[0]) => {
    const dailyRevenue = dataService.getDailyRevenue(date);
    const plan = dataService.getDailyPlan(date) || {
      revenue: 150000,
      focus: 50000,
      sbp: 30000
    };

    const totalRevenue = dailyRevenue.focus + dailyRevenue.sbp + dailyRevenue.cash;
    
    return {
      revenue: { 
        plan: plan.revenue, 
        fact: totalRevenue,
        title: '–í—ã—Ä—É—á–∫–∞'
      },
      focus: { 
        plan: plan.focus, 
        fact: dailyRevenue.focus,
        title: '–§–æ–∫—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'
      },
      sbp: { 
        plan: plan.sbp, 
        fact: dailyRevenue.sbp,
        title: '–°–ë–ü'
      },
      rawData: dailyRevenue
    };
  },

  getTodayStats: () => {
    const today = new Date().toISOString().split('T')[0];
    const data = dataService.getDailyRevenue(today);
    const entries = dataService.getRevenueEntries(today);
    
    return {
      total: data.focus + data.sbp + data.cash,
      entries: entries || []
    };
  }
};