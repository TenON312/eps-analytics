// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
class TelegramService {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º import.meta.env –≤–º–µ—Å—Ç–æ process.env –¥–ª—è Vite
    this.botToken = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    this.chatId = import.meta.env.VITE_TELEGRAM_CHAT_ID;
    this.isConfigured = !!(this.botToken && this.chatId);
    
    console.log('TelegramService config:', {
      hasToken: !!this.botToken,
      hasChatId: !!this.chatId,
      isConfigured: this.isConfigured
    });
  }

  async sendMessage(text) {
    if (!this.isConfigured) {
      console.warn('Telegram bot not configured');
      return false;
    }

    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: text,
          parse_mode: 'HTML'
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      console.log('‚úÖ Telegram notification sent');
      return true;
    } catch (error) {
      console.error('‚ùå Error sending Telegram message:', error);
      return false;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞
  async sendPlanCompletion(planType, fact, plan) {
    const message = `
üéâ <b>–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>
üè™ <b>–¢–∏–ø:</b> ${planType}
üí∞ <b>–§–∞–∫—Ç:</b> ${fact.toLocaleString('ru-RU')} ‚ÇΩ
üéØ <b>–ü–ª–∞–Ω:</b> ${plan.toLocaleString('ru-RU')} ‚ÇΩ
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;
    return this.sendMessage(message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  async sendRevenueEntry(employeeName, amount, details) {
    const message = `
üí∞ <b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ä—É—á–∫–µ</b>
üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> ${employeeName}
üíµ <b>–°—É–º–º–∞:</b> ${amount.toLocaleString('ru-RU')} ‚ÇΩ
üìä <b>–î–µ—Ç–∞–ª–∏:</b> ${details}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;
    return this.sendMessage(message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
  async sendScheduleRequest(employeeName, requestType, date) {
    const message = `
üìÖ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞</b>
üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> ${employeeName}
üìã <b>–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:</b> ${requestType}
üìÖ <b>–î–∞—Ç–∞:</b> ${date}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;
    return this.sendMessage(message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  async sendAdminNotification(title, message) {
    const fullMessage = `
üîî <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>
üì¢ <b>${title}</b>
üìù ${message}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;
    return this.sendMessage(fullMessage);
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const telegramService = new TelegramService();

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export const mockTelegramService = {
  sendMessage: (text) => {
    console.log('üì± Telegram message (mock):', text);
    return Promise.resolve(true);
  },
  sendPlanCompletion: (planType, fact, plan) => {
    console.log(`üì± Plan completion: ${planType} - ${fact}/${plan}`);
    return Promise.resolve(true);
  },
  sendRevenueEntry: (employeeName, amount, details) => {
    console.log(`üì± Revenue entry: ${employeeName} - ${amount} —Ä—É–±`);
    return Promise.resolve(true);
  },
  sendScheduleRequest: (employeeName, requestType, date) => {
    console.log(`üì± Schedule request: ${employeeName} - ${requestType} on ${date}`);
    return Promise.resolve(true);
  }
};

// –£—Å–ª–æ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
export default import.meta.env.PROD ? telegramService : mockTelegramService;