import React, { useState, useEffect } from 'react';
import { Save, Calculator, RotateCcw, ArrowLeft } from 'lucide-react';
import { dataService } from '../services/dataService';
import { useNavigate } from 'react-router-dom';
import { useNotifications } from '../contexts/NotificationContext';
import { offlineService } from '../services/offlineService';
import { notificationService } from '../services/notificationService';

const DataEntry = ({ userData }) => {
  const navigate = useNavigate();
  const { addNotification } = useNotifications();
  
  const [formData, setFormData] = useState({
    focus: '',
    sbp: '',
    cash: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [lastSaved, setLastSaved] = useState(null);
  const [todayData, setTodayData] = useState({ focus: 0, sbp: 0, cash: 0 });
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadTodayData();
  }, []);

  const loadTodayData = () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const data = dataService.getDailyRevenue(today);
      setTodayData(data || { focus: 0, sbp: 0, cash: 0 });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setTodayData({ focus: 0, sbp: 0, cash: 0 });
    }
  };

  const handleInputChange = (field, value) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const numericValue = value.replace(/[^\d]/g, '');
    setFormData(prev => ({
      ...prev,
      [field]: numericValue
    }));
    setError(''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  };

  const calculateTotal = () => {
    const focus = parseInt(formData.focus) || 0;
    const sbp = parseInt(formData.sbp) || 0;
    const cash = parseInt(formData.cash) || 0;
    return focus + sbp + cash;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (calculateTotal() === 0) {
      setError('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ –ø–æ–ª–µ');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      const today = new Date().toISOString().split('T')[0];
      const employeeId = userData?.employeeId || 'unknown';
      const employeeName = userData?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫';
      
      const revenueData = {
        focus: formData.focus || '0',
        sbp: formData.sbp || '0',
        cash: formData.cash || '0'
      };

      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:', { today, employeeId, employeeName, revenueData });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const success = await offlineService.executeWithOfflineSupport(
        'saveRevenueEntry',
        async () => {
          return dataService.saveRevenueEntry(today, employeeId, employeeName, revenueData);
        },
        { today, employeeId, employeeName, revenueData }
      );

      if (success) {
        addNotification({
          type: 'success',
          title: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
          message: `–£—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ ${calculateTotal().toLocaleString('ru-RU')} ‚ÇΩ`
        });
        
        notificationService.showDataSaved(calculateTotal());
        
        setLastSaved(new Date());
        loadTodayData();
        setFormData({ focus: '', sbp: '', cash: '' });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      
      if (error.message.includes('–æ—Ñ–ª–∞–π–Ω') || error.message.includes('–æ—Ç–ª–æ–∂–µ–Ω–æ')) {
        addNotification({
          type: 'warning',
          title: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ',
          message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏'
        });
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–∞–∂–µ –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ
        setLastSaved(new Date());
        loadTodayData();
        setFormData({ focus: '', sbp: '', cash: '' });
      } else {
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleReset = () => {
    setFormData({ focus: '', sbp: '', cash: '' });
    setError('');
  };

  const formatCurrency = (value) => {
    return parseInt(value || 0).toLocaleString('ru-RU');
  };

  return (
    <div className="min-h-screen bg-gray-900 p-4">
      <div className="max-w-md mx-auto">
        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <button 
          onClick={() => navigate('/dashboard')}
          className="flex items-center text-gray-400 hover:text-white mb-6 transition-colors"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É
        </button>

        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h1>
          <p className="text-gray-400">
            {new Date().toLocaleDateString('ru-RU', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </p>
        </div>

        {/* –°–≤–æ–¥–∫–∞ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–∞–Ω–Ω—ã–º */}
        <div className="card p-4 mb-6">
          <h3 className="text-lg font-semibold text-white mb-3">–°–µ–≥–æ–¥–Ω—è —É–∂–µ –≤–Ω–µ—Å–µ–Ω–æ:</h3>
          <div className="grid grid-cols-3 gap-2 text-center">
            <div>
              <div className="text-sm text-gray-400">–§–æ–∫—É—Å–Ω—ã–µ</div>
              <div className="text-white font-medium">{formatCurrency(todayData.focus)} ‚ÇΩ</div>
            </div>
            <div>
              <div className="text-sm text-gray-400">–°–ë–ü</div>
              <div className="text-white font-medium">{formatCurrency(todayData.sbp)} ‚ÇΩ</div>
            </div>
            <div>
              <div className="text-sm text-gray-400">–ù–∞–ª–∏—á–Ω—ã–µ</div>
              <div className="text-white font-medium">{formatCurrency(todayData.cash)} ‚ÇΩ</div>
            </div>
          </div>
          <div className="mt-3 pt-3 border-t border-gray-600">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">–û–±—â–∞—è —Å—É–º–º–∞:</span>
              <span className="text-xl font-bold text-white">
                {formatCurrency(todayData.focus + todayData.sbp + todayData.cash)} ‚ÇΩ
              </span>
            </div>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-4 mb-4">
            <p className="text-red-400">{error}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="card p-6 space-y-6">
          {/* –§–æ–∫—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã */}
          <div className="form-group">
            <label className="form-label">
              üí∞ –§–æ–∫—É—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ä—É–±–ª–∏)
            </label>
            <input
              type="text"
              value={formData.focus}
              onChange={(e) => handleInputChange('focus', e.target.value)}
              className="input-primary text-lg font-mono"
              placeholder="0"
            />
            {formData.focus && (
              <div className="mt-2 text-sm text-gray-400">
                {formatCurrency(formData.focus)} ‚ÇΩ
              </div>
            )}
          </div>

          {/* –°–ë–ü */}
          <div className="form-group">
            <label className="form-label">
              üì± –°–ë–ü (—Ä—É–±–ª–∏)
            </label>
            <input
              type="text"
              value={formData.sbp}
              onChange={(e) => handleInputChange('sbp', e.target.value)}
              className="input-primary text-lg font-mono"
              placeholder="0"
            />
            {formData.sbp && (
              <div className="mt-2 text-sm text-gray-400">
                {formatCurrency(formData.sbp)} ‚ÇΩ
              </div>
            )}
          </div>

          {/* –ù–∞–ª–∏—á–Ω—ã–µ */}
          <div className="form-group">
            <label className="form-label">
              üíµ –ù–∞–ª–∏—á–Ω—ã–µ (—Ä—É–±–ª–∏)
            </label>
            <input
              type="text"
              value={formData.cash}
              onChange={(e) => handleInputChange('cash', e.target.value)}
              className="input-primary text-lg font-mono"
              placeholder="0"
            />
            {formData.cash && (
              <div className="mt-2 text-sm text-gray-400">
                {formatCurrency(formData.cash)} ‚ÇΩ
              </div>
            )}
          </div>

          {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ */}
          <div className="bg-gradient-to-r from-gray-800 to-gray-700 rounded-xl p-4 border border-gray-600">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ:</span>
              <span className="text-2xl font-bold text-white">
                {formatCurrency(calculateTotal())} ‚ÇΩ
              </span>
            </div>
            <div className="flex items-center mt-2 text-sm text-gray-400">
              <Calculator className="h-4 w-4 mr-1" />
              –§–æ–∫—É—Å–Ω—ã–µ + –°–ë–ü + –ù–∞–ª–∏—á–Ω—ã–µ
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex space-x-3 pt-4">
            <button
              type="button"
              onClick={handleReset}
              disabled={isSubmitting}
              className="flex-1 btn-secondary flex items-center justify-center"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
            
            <button
              type="submit"
              disabled={isSubmitting || calculateTotal() === 0}
              className="flex-1 btn-primary flex items-center justify-center"
            >
              {isSubmitting ? (
                <>
                  <div className="loading-spinner mr-2"></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </>
              )}
            </button>
          </div>

          {lastSaved && (
            <div className="text-center text-sm text-green-400 animate-fade-in">
              ‚úì –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã {lastSaved.toLocaleTimeString('ru-RU')}
            </div>
          )}
        </form>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <div className="mt-6 text-center text-gray-500 text-sm">
          <p>–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
          <p className="mt-1">–†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.</p>
        </div>
      </div>
    </div>
  );
};

export default DataEntry;